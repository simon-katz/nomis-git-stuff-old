#!/bin/bash

THIS_DIR=$(dirname "${BASH_SOURCE[0]}")

source ${THIS_DIR}/../../../bash/common/git-funs.sh

## For now, things only work when there is a single remote and it is named
## "origin".
for remote in $(git remote)
do
    if [ $remote != "origin" ]
    then
        echo "ERROR: This only works when there is a single remote and it is named \"origin\"."
        exit 1
    fi
done

function return_remote_name {
    echo $(git remote)
}

function return_unpushed_commit_names {
    echo $(git log --format=%s $(return_remote_name)/$(git__return_branch-name)..HEAD)
}

## Check that there are no unpushed "apply-local-formatting" commits.
for commit_msg in $(return_unpushed_commit_names)
do
    if [[ ${commit_msg} == apply-local-formatting* ]]
    then
        echo 'Cannot push an "apply-local-formatting" commit. You may want the "nomis-cljfmt-v2-git-push" command.'
        exit 1
    fi
done

## Stash everything temporarily.
## Note that this doesn't create a stash if there are no changes.
NOMIS_TIMESTAMP=$(date "+%Y-%m-%d--%H-%M-%S")
THE_CURRENT_COMMIT_SHA=$(git rev-parse HEAD)
STASH_NAME="_nomis-cljfmt-v2-pre-push--${NOMIS_TIMESTAMP}--for-${THE_CURRENT_COMMIT_SHA}"
git stash push \
    --quiet \
    --include-untracked \
    --message "${STASH_NAME}"

## Do the checks and let the user know about any failure:
echo -n "Checking formatting..."
lein cljfmt check > /dev/null 2>&1
return_code=$?
if [ $return_code -ne 0 ]
then
    echo "BAD FORMATTING."
    echo "ERROR: cljfmt returned a non-zero exit status -- cannot push."
else
    echo "OK."
fi

## If we created a stash, pop it:
TOP_STASH=$(git stash list | head -1)
if [[ $TOP_STASH =~ ${STASH_NAME} ]]; then
    # Return to original state.
    git stash apply --quiet --index # TODO Change this to pop when are sure all is OK
fi

## Deal with the return value:
if [ $return_code -ne 0 ]
then
    exit 1
fi
