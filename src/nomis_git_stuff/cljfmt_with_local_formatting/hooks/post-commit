#!/bin/bash

THIS_DIR=$(dirname "${BASH_SOURCE[0]}")

source ${THIS_DIR}/../lib/git-funs.sh

function return_make_safekeeping_stash_name {
    local timestamp=$1
    local commit_sha=$2
    echo "_nomis-cljfmt-v2-post-commit--${timestamp}--for-${commit_sha}"
}

function reformat_and_commit {
    echo 'Applying cljfmt formatting.'
    local user_commit_sha=$1
    # There's a possibility here of exceeding the maximum shell command length.
    # - TODO Make sure you detect and report any such error.
    # - If this is a problem, don't create and use `changed_files`.
    local changed_files=$(git diff-tree --no-commit-id --name-only -r ${user_commit_sha}~2 ${user_commit_sha})
    lein cljfmt fix ${changed_files} > /dev/null 2>&1
    git add .
    echo 'Committing: cljfmt formatting.'
    git commit --quiet --no-verify --allow-empty -m 'apply-cljfmt-formatting'
}

function create_commit_for_apply_local_formatting {
    local user_commit_sha=$1
    echo 'Committing: apply-local-formatting.'
    # Set index to be as it was.
    git checkout --quiet ${user_commit_sha} .
    # Create the commit.
    # TODO Get the exact 'apply-local-formatting' message from the commit.
    git commit --quiet --no-verify --allow-empty -m 'apply-local-formatting'
}

function restore_uncommitted_changes {
    local stash_name=$1
    echo 'Thinking about restoring uncommitted changes.'
    TOP_STASH=$(git__return_top_stash_name 1)
    if [[ $TOP_STASH =~ "${stash_name}" ]]; then
        echo 'Restoring uncommitted changes.'
        git stash apply --quiet # TODO Change this to pop when you are happy.
    fi
}

function echo_in_nested_post_commit_hook_message {
    echo '    post-commit hook: Doing nothing, because we are in a nested post-commit hook.'
}

function echo_this_is_an_apply_local_formatting_commit {
    echo '    post-commit hook: Doing nothing, because this is an "apply-local-formatting" commit.'
}

function echo_previous_commit_is_not_apply_local_formatting_message {
    echo '    post-commit hook: Doing nothing, because previous commit is not an "apply-local-formatting" commit -- commit message is:' $(git__return_top_commit_message 2)
}

function post_commit {
    if [ -f .git/_nomis-doing-post-commit-rewriting ] ; then
        echo_in_nested_post_commit_hook_message
    elif [[ $(git__return_top_commit_message 1) == apply-local-formatting* ]] ; then
        echo_this_is_an_apply_local_formatting_commit
    elif [[ $(git__return_top_commit_message 2) != apply-local-formatting* ]] ; then
        echo_previous_commit_is_not_apply_local_formatting_message
    else
        touch .git/_nomis-doing-post-commit-rewriting

        local THE_USER_COMMIT_SHA=$(git rev-parse HEAD)
        local NOMIS_TIMESTAMP=$(date "+%Y-%m-%d--%H-%M-%S")
        local STASH_NAME=$(return_make_safekeeping_stash_name ${NOMIS_TIMESTAMP} ${THE_USER_COMMIT_SHA})

        ## TODO Take a closer look at these stashes.
        ##      - Do they still seem to delete many files?
        git__stash_if_dirty_include_untracked "${STASH_NAME}"

        reformat_and_commit ${THE_USER_COMMIT_SHA}
        git__replace_previous_n_commits_incl_staged "3" ${THE_USER_COMMIT_SHA}
        create_commit_for_apply_local_formatting ${THE_USER_COMMIT_SHA}
        restore_uncommitted_changes "${STASH_NAME}"

        rm .git/_nomis-doing-post-commit-rewriting
    fi
}

post_commit
