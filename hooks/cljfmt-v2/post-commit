#!/bin/bash

NOMIS_IN_POST_COMMIT_HOOK=".git/nomis-in-post-commit-hook"

THE_USER_COMMIT_SHA=$(git rev-parse HEAD)

if [ ! -f ${NOMIS_IN_POST_COMMIT_HOOK} ]; then
    touch ${NOMIS_IN_POST_COMMIT_HOOK}
    # TODO DO you need both these "apply-local-formatting*" tests?
    if [[ $(git log --format=%s -n 1) == apply-local-formatting* \
              || $(git log --format=%s -n 2 | tail -1) != apply-local-formatting* ]]; then
        :
    else
        ## Reformat and apply any changes.
        echo "Applying cljfmt formatting and committing"
        lein cljfmt fix > /dev/null 2>&1
        WERE_CHANGES_MADE_P=$?
        git add .
        git commit --quiet --no-verify --allow-empty -m "apply-cljfmt-formatting"
        echo "Done checking et"
        git reset --quiet --soft HEAD~3
        git add . # TODO Is this needed?
        git commit --quiet -C ${THE_USER_COMMIT_SHA}

        ## Create a new "apply-local-formatting" commit.
        echo "Creating a new \"apply-local-formatting\" commit"
        # Set index to be as it was.
        git checkout --quiet ${THE_USER_COMMIT_SHA} .
        # Create an "apply-local-formatting" commit.
        # TODO Get the exact "apply-local-formatting" message from the commit.
        git commit --quiet --no-verify --allow-empty -m "apply-local-formatting"

        ## Restore worktree.
        echo "Thinking about restoring worktree"
        TOP_STASH=$(git stash list | head -1)
        if [[ $TOP_STASH =~ "_created-by-pre-commit-hook" ]]; then
            echo "Restoring worktree"

            ## Fails weirdly.

            ## Oh, I think it's the pre-commit hook that you messed up.

            ## This worked when I did everything in a command tool.
            ## - Except that the `git stash show` doesn't show untracked files.
            ## - Try    git show stash@{0}^3
            ##      - see https://stackoverflow.com/questions/12681529/in-git-is-there-a-way-to-show-untracked-stashed-files-without-applying-the-stas
            ##      - Maybe want to ignore any errors.
            ## But not by itself.
            # git stash show -p > .git/nomis-changes.patch
            # git apply .git/nomis-changes.patch
            # rm .git/nomis-changes.patch

            git stash apply --quiet # TODO Change this to pop when you are happy
        fi
    fi
    rm ${NOMIS_IN_POST_COMMIT_HOOK}
fi


#### TODO Need to re-apply the stash if an error happened.
####      And probably in other cases too.
