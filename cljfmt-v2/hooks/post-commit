#!/bin/bash

THIS_DIR=$(dirname "${BASH_SOURCE[0]}")

source ${THIS_DIR}/../lib/git-funs.sh

function return__stash_name {
    local timestamp=$1
    local commit_sha=$2
    echo "_created-by-nomis-cljfmt-v2-post-commit-hook-${timestamp}-for-${commit_sha}"
}

function post_commit {
    if [ -f .git/_nomis-doing-post-commit-rewriting ] ; then
        :
        echo '    post-commit hook: Doing nothing, because we are in a nested post-commit hook.'
    elif [[ $(git log --format=%s -n 1) == apply-local-formatting* ]] ; then
        :
        echo '    post-commit hook: Doing nothing, because this is an "apply-local-formatting" commit.'
    elif [[ $(git log --format=%s -n 2 | tail -1) != apply-local-formatting* ]] ; then
        :
        THE_USER_COMMIT_MESSAGE=$(git log -1 --pretty=%B)
        echo '    post-commit hook: Doing nothing, because previous commit is not an "apply-local-formatting" commit -- commit message is:' ${THE_USER_COMMIT_MESSAGE}
    else
        touch .git/_nomis-doing-post-commit-rewriting

        local THE_USER_COMMIT_SHA=$(git rev-parse HEAD)
        local NOMIS_TIMESTAMP=$(date "+%Y-%m-%d-%H-%M-%S")
        local STASH_NAME=$(return__stash_name ${NOMIS_TIMESTAMP} ${THE_USER_COMMIT_SHA})

        ## Temporarily stash the changes that weren't commited.
        ## Note that this only creates a stash if there are changes.
        ## TODO Take a closer look at these stashes.
        ##      - Do they still seem to delete many files?
        git_stash_include_untracked "${STASH_NAME}"

        ## Reformat and replace commits.
        echo 'Applying cljfmt formatting.'
        lein cljfmt fix > /dev/null 2>&1
        WERE_CHANGES_MADE_P=$?
        git add .
        echo 'Committing: cljfmt formatting.'
        git commit --quiet --no-verify --allow-empty -m 'apply-cljfmt-formatting'
        echo 'Committing: Replacing last three commits with a single commit.'
        git reset --quiet --soft HEAD~3
        git add . # TODO Is this needed?
        git commit --quiet --no-verify -C ${THE_USER_COMMIT_SHA}

        ## Create a new 'apply-local-formatting' commit.
        echo 'Committing: apply-local-formatting.'
        # Set index to be as it was.
        git checkout --quiet ${THE_USER_COMMIT_SHA} .
        # Create the commit.
        # TODO Get the exact 'apply-local-formatting' message from the commit.
        git commit --quiet --no-verify --allow-empty -m 'apply-local-formatting'

        ## Restore uncommitted changes.
        echo 'Thinking about restoring uncommitted changes.'
        TOP_STASH=$(git stash list | head -1)
        if [[ $TOP_STASH =~ "${STASH_NAME}" ]]; then
            echo 'Restoring uncommitted changes.'
            git stash apply --quiet # TODO Change this to pop when you are happy.
        fi
        rm .git/_nomis-doing-post-commit-rewriting
    fi
}

post_commit
